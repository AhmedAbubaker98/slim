# Build SLIM Gateway Binaries
# This workflow builds standalone SLIM gateway binaries for distribution
# Purpose: Enable SLIM usage without Docker (eliminates 30-45 min setup time)

name: Build SLIM Gateway Binaries

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: windows-x64,linux-x64,macos-arm64)'
        required: false
        default: 'windows-x64'
      upload_artifacts:
        description: 'Upload as artifacts'
        required: false
        default: 'true'

jobs:
  build-windows-x64:
    name: Build Windows x64
    runs-on: windows-latest
    if: contains(github.event.inputs.platforms, 'windows-x64')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Build SLIM gateway binary
        working-directory: ./data-plane
        run: |
          cargo build --release --bin slim --target x86_64-pc-windows-msvc
        
      - name: Verify binary
        run: |
          $binary = "data-plane/target/x86_64-pc-windows-msvc/release/slim.exe"
          if (Test-Path $binary) {
            $size = (Get-Item $binary).Length / 1MB
            Write-Host "✅ Binary built successfully: $([math]::Round($size, 2)) MB"
            
            # Test that it runs
            & $binary --version
          } else {
            Write-Error "❌ Binary not found at $binary"
            exit 1
          }

      - name: Calculate SHA256
        id: checksum
        run: |
          $binary = "data-plane/target/x86_64-pc-windows-msvc/release/slim.exe"
          $hash = (Get-FileHash $binary -Algorithm SHA256).Hash.ToLower()
          Write-Host "SHA256: $hash"
          echo "sha256=$hash" >> $env:GITHUB_OUTPUT

      - name: Upload binary artifact
        if: github.event.inputs.upload_artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: slim-windows-x64
          path: data-plane/target/x86_64-pc-windows-msvc/release/slim.exe
          retention-days: 30
          if-no-files-found: error

      - name: Create release info
        run: |
          $binary = "data-plane/target/x86_64-pc-windows-msvc/release/slim.exe"
          $size = (Get-Item $binary).Length / 1MB
          $version = cargo pkgid -p agntcy-slim | Select-String -Pattern '@(.*)$' | ForEach-Object { $_.Matches.Groups[1].Value }
          
          @"
          ## Windows x64 Binary
          
          - **Platform**: Windows x86_64
          - **Size**: $([math]::Round($size, 2)) MB
          - **Version**: $version
          - **SHA256**: ${{ steps.checksum.outputs.sha256 }}
          - **Target**: x86_64-pc-windows-msvc
          
          ### Usage
          ``````powershell
          # Download the binary
          # Place in: ~/.telos/bin/slim.exe
          
          # Run SLIM gateway
          slim.exe --config config.yaml
          ``````
          "@ | Out-File -FilePath release-notes.md
          
      - name: Upload release notes
        if: github.event.inputs.upload_artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-windows-x64
          path: release-notes.md
          retention-days: 30

  # Placeholder jobs for future platforms
  build-linux-x64:
    name: Build Linux x64
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platforms, 'linux-x64')
    
    steps:
      - name: Placeholder
        run: echo "Linux x64 build - coming soon"

  build-macos-arm64:
    name: Build macOS ARM64
    runs-on: macos-14
    if: contains(github.event.inputs.platforms, 'macos-arm64')
    
    steps:
      - name: Placeholder
        run: echo "macOS ARM64 build - coming soon"

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-windows-x64]
    if: always()
    
    steps:
      - name: Report status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Windows x64: ${{ needs.build-windows-x64.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Test binary locally" >> $GITHUB_STEP_SUMMARY
          echo "3. Bundle in telos-devkit" >> $GITHUB_STEP_SUMMARY
